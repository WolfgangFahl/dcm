name: iSAQB e.V. CPSA-F
short_name: CPSA-F
id: CPSA-F_de
url: https://github.com/isaqb-org/curriculum-foundation
description: International Software Architecture Qualification Board Certified Professional
  for Software Architecture Foundation Level Mock Exam Self Assessment
total_levels: 3
stacked_levels: false
aspects:
- name: basics
  short_name: basics
  id: basics
  description: Basics
  color_code: '#c4903a'
  areas:
  - name: Definitionen von Softwarearchitektur verstehen (R1)
    short_name: LZ01-01
    id: 01-01
    description: |2+


      Softwarearchitekt:innen kennen und verstehen die Gemeinsamkeiten vieler Definitionen von Softwarearchitektur:

      * {glossary_url}building-block[Komponenten/Bausteine] mit Schnittstellen und Beziehungen
      * Bausteine als allgemeiner Begriff, Komponenten als eine spezielle Ausprägung davon
      * Strukturen, {glossary_url}cross-cutting-concern[Querschnittsthemen], Prinzipien
      * Architekturentscheidungen und ihre Auswirkungen auf das gesamte System und seinen Lebenszyklus

  - name: Ziele und Nutzen von Softwarearchitektur verstehen und erläutern (R1)
    short_name: LZ01-02
    id: 01-02
    description: |2+


      Softwarearchitekt:innen können die folgenden wesentlichen Ziele und Nutzen der Softwarearchitektur begründen:

      * Entwurf, Implementierung, Pflege und Betrieb von Systemen zu unterstützen
      * funktionale Anforderungen zu erreichen bzw. deren Erfüllbarkeit sicherzustellen
      * Anforderungen wie Zuverlässigkeit, Wartbarkeit, Änderbarkeit, Sicherheit, Energieeffizienz zu erreichen
      * Verständnis für Strukturen und Konzepte des Systems bei allen relevanten {glossary_url}stakeholder[Stakeholdern] sicherstellen
      * Komplexität systematisch zu reduzieren
      * architekturrelevante Richtlinien für Implementierung und Betrieb zu spezifizieren

  - name: Langfristige Auswirkungen von Softwarearchitektur kennen (R3)
    short_name: LZ01-03
    id: 01-03
    description: |2



      Softwarearchitekt:innen kennen

      * den Zusammenhang zwischen Architekturentscheidungen und der zukünftigen Anpassbarkeit und Wartbarkeit des Systems
      * die Auswirkungen durch Änderungen von Anforderungen, Technologien oder Systemumgebung auf bestehende Architekturentscheidungen
      * die langfristigen Konsequenzen von Architekturentscheidungen auf verschiedene Qualitätsmerkmale des Systems
      * die Wechselwirkungen zwischen IT-Systemen und den unterstützten Geschäfts- und Betriebsprozessen

      Sie wissen, wie sie die Auswirkungen von Architekturentscheidungen auf die langfristige Entwicklung eines Systems analysieren können.
  - name: Aufgaben und Verantwortung von Softwarearchitekt:innen verstehen (R1)
    short_name: LZ01-04
    id: 01-04
    description: "\nSoftwarearchitekt:innen tragen die Verantwortung für die Erreichung\
      \ der Anforderungen und die Entwicklung der Architektur der Lösung.\nSie müssen\
      \ diese Verantwortung, abhängig vom jeweiligen Prozess- oder Vorgehensmodell,\
      \ mit der Gesamtverantwortung der Projektleitung oder anderen Rollen koordinieren.\n\
      \nAufgaben und Verantwortung von Softwarearchitekt:innen:\n\n* Anforderungen\
      \ und Randbedingungen klären und hinterfragen. \nNotwendige Verfeinerungen mit\
      \ den entsprechenden Stakeholdern koordinieren und abstimmen.\n* Strukturentscheidungen\
      \ hinsichtlich Systemzerlegung und Bausteinstruktur treffen, dabei Abhängigkeiten\
      \ und Schnittstellen zwischen den Bausteinen festlegen\n* Querschnittsthemen\
      \ entscheiden (beispielsweise Persistenz, Kommunikation, GUI)\n* Softwarearchitektur\
      \ auf Basis von Sichten, Architekturmustern sowie technischen und Querschnittsthemen\
      \ kommunizieren und dokumentieren\n* Umsetzung und Implementierung der Architektur\
      \ begleiten, Rückmeldungen der beteiligten Stakeholder bei Bedarf in die Architektur\
      \ einarbeiten, Konsistenz von Quellcode und Softwarearchitektur prüfen und sicherstellen\n\
      * Softwarearchitektur analysieren und bewerten, insbesondere hinsichtlich Risiken\
      \ bezüglich der Erreichung von Anforderungen. \n//Siehe <<LZ-4-3>> und <<LZ-4-4>>.\n\
      * Die Konsequenzen von Architekturentscheidungen erkennen, aufzeigen und gegenüber\
      \ anderen Stakeholdern argumentieren\n\nSie sollen selbstständig die Notwendigkeit\
      \ von Iterationen bei allen Aufgaben erkennen und Möglichkeiten für entsprechende\
      \ Rückmeldung aufzeigen.\n\n"
  - name: Abgrenzung zu anderen Architekturdomänen (R3)
    short_name: LZ01-05
    id: 01-05
    description: |2+


      Der Fokus des iSAQB CPSA-Foundation Level liegt auf Strukturen und Konzepten einzelner Softwaresysteme.

      Darüber hinaus kennen Softwarearchitekt:innen weitere Architekturdomänen, beispielsweise:

      * Unternehmens-IT-Architektur (_Enterprise IT Architecture_): Struktur von Anwendungslandschaften
      * Geschäfts- bzw. Prozessarchitektur (_Business and Process Architecture_): Struktur von u.a. Geschäftsprozessen
      * Informationsarchitektur: systemübergreifende Struktur und Nutzung von Information und Daten
      * Infrastruktur- bzw. Technologiearchitektur: Struktur der technischen Infrastruktur, Hardware, Netze etc.
      * Hardware- oder Prozessorarchitektur (für hardwarenahe Systeme)
      * Systemarchitektur (verschiedene Bedeutungen, abhängig von der Definition des Begriffs "System")

      Diese Architekturdomänen sind nicht inhaltlicher Fokus vom CPSA-F.

  - name: Rolle von Softwarearchitekt:innen mit anderen Stakeholdern in Beziehung
      setzen (R1)
    short_name: LZ01-06
    id: 01-06
    description: "\nSoftwarearchitekt:innen können ihre Rolle erklären. \nSie sollten\
      \ ihren Beitrag zur Systementwicklung in Verbindung mit anderen Stakeholdern\
      \ und Organisationseinheiten kontextspezifisch ausgestalten, insbesondere zu:\n\
      \n* Produktmanagement, Product-Owner\n* Projektleitung und -management\n* Anforderungsanalytiker:innen\
      \ (System-/Businessanalyse, Anforderungsmanagement, Fachbereich)\n* Entwicklung\n\
      * Qualitätssicherung und Test\n* IT-Betrieb (Produktion, Rechenzentren), zutreffend\
      \ primär für Informationssysteme\n* Hardwareentwicklung und Systemarchitektur,\
      \ zutreffend primär für eingebettete und hardwarenahe Systeme\n* Unternehmensarchitektur,\
      \ Architekturboard.\n\n"
  - name: Bedeutung von Daten und Datenmodellen (R2)
    short_name: LZ01-07
    id: 01-07
    description: "\n\nSoftwarearchitekt:innen verstehen die Bedeutung von Daten und\
      \ Datenmodellen (unabhängig von ihrer physischen Repräsentation) für die Architektur.\
      \ \nSie\n\n* können Datenmodelle identifizieren, die maßgeblichen Einfluss auf\
      \ die Architektur haben. \n* können solche Datenmodelle systematisch entwerfen.\
      \ \n* verstehen den Unterschied zwischen {glossary_url}product[Produkten] und\
      \ {glossary_url}sum[Summen] in der Datenmodellierung.\n\nSoftwarearchitekt:innen\n\
      \n* verstehen die Bedeutung der Entkopplung von Datenmodellen und ihrer Repräsentation\
      \ in Datenbanken, Dateien und Übertragungsprotokollen. \n* können die Auswirkungen\
      \ von Daten auf Architekturentscheidungen z.B. in Bezug auf Speicherung, Sicherheit,\
      \ Skalierbarkeit, Zuverlässigkeit, Performance usw. erläutern. \n\n"
- name: design
  short_name: design
  id: design
  description: Design
  color_code: '#ba904c'
  areas:
  - name: Anforderungen durch Architektur erreichen (R1)
    short_name: LZ03-01
    id: 03-01
    description: |2+


      Softwarearchitekt:innen:

      * verstehen, dass architektonische Aktivitäten davon geleitet werden sollten, spezifische Qualitäten zu erreichen oder zu verbessern
      * können einen Architekturentwurf vorschlagen, der geeignet ist, Anforderungen zu erfüllen
      * können einschätzen, welche Qualitäten sie durch bestimmte Aktivitäten oder Entscheidungen verbessern
      * können mögliche Abwägungen zwischen Entwürfen sowie den entsprechenden Risiken identifizieren und kommunizieren

  - name: Softwarearchitekturen entwerfen (R1)
    short_name: LZ03-02
    id: 03-02
    description: |2+


      Softwarearchitekt:innen können:

      * Softwarearchitekturen auf Basis bekannter funktionaler und Qualitätsanforderungen für nicht sicherheits- oder unternehmenskritische Softwaresysteme entwerfen und angemessen kommunizieren und dokumentieren
      * Strukturentscheidungen hinsichtlich Systemzerlegung und Bausteinstruktur treffen, dabei Abhängigkeiten zwischen Bausteinen festlegen (siehe <<LG-03-06>>)
      * gegenseitige Abhängigkeiten und Abwägungen bezüglich {glossary_url}architectural-decision[Architekturentscheidungen] erkennen und begründen
      * Begriffe {glossary_url}blackbox[Blackbox] und {glossary_url}whitebox[Whitebox] erklären und zielgerichtet anwenden
      * schrittweise Verfeinerung und Spezifikation von Bausteinen durchführen
      * Architektursichten entwerfen, insbesondere Baustein-, Laufzeit- und Verteilungssicht (siehe <<LG-04-05>>)
      * die aus Entscheidungen resultierenden Konsequenzen auf den Quellcode erklären
      * domänenspezifische und technische Bestandteile in Architekturen trennen und diese Trennung begründen
      * Risiken von Architekturentscheidungen identifizieren.

  - name: Vorgehen und Heuristiken zur Architekturentwicklung auswählen und anwenden
      können (R1,R3)
    short_name: LZ03-03
    id: 03-03
    description: "\n\nSoftwarearchitekt:innen können grundlegende Vorgehensweisen\
      \ der Architekturentwicklung benennen, erklären und anwenden, beispielsweise:\n\
      \n* Top-down- und Bottom-up-Vorgehen beim Entwurf, siehe <<gharbietal>>, <<starke>>\
      \ (R1)\n* Sichtenbasierte Architekturentwicklung, siehe <<rozanskiwoods>>, <<kruchten95>>\
      \ (R1)\n* Domain-Driven Design, siehe <<evans>> (R3)\n* Evolutionäre Architektur,\
      \ siehe <<ford>> (R3)\n* Globale Analyse, siehe <<hofmeister>> (R3) \n* Modellbasierter\
      \ Entwurf (R3)\n\n"
  - name: Entwurfsprinzipien erläutern und anwenden (R1-R3)
    short_name: LZ03-04
    id: 03-04
    description: "\n\n\nSoftwarearchitekt:innen sind in der Lage zu erklären, was\
      \ Entwurfsprinzipien sind.\nSie können deren grundlegende Ziele und deren Anwendung\
      \ im Hinblick auf Softwarearchitektur skizzieren. (R2)\n\nSoftwarearchitekt:innen\
      \ sind in der Lage:\n\n* die unten aufgeführten Gestaltungsprinzipien zu erläutern\
      \ und mit Beispielen zu illustrieren\n* zu erklären, wie diese Prinzipien angewendet\
      \ werden sollen\n* darzulegen, wie Anforderungen die Anwendung dieser Prinzipien\
      \ beeinflussen\n* die Auswirkungen der Entwurfsprinzipien auf die Implementierung\
      \ zu erläutern\n* Quellcode und Architektur zu analysieren, um zu beurteilen,\
      \ ob diese Entwurfsprinzipien angewendet wurden oder angewendet werden sollten\n\
      \n\n**Abstraktion** (R2)\n\n* im Sinne eines Vorgehens zur Erarbeitung zweckmäßiger\
      \ Generalisierungen\n* als eine Entwurfstechnik, bei dem die Bausteine von Abstraktionen\
      \ und nicht von Implementierungen abhängen\n* Schnittstellen als Abstraktionen\n\
      \n\n**Modularisierung** (R1)\n\n* Geheimnisprinzip ({glossary_url}information-hiding[Information\
      \ Hiding]) und {glossary_url}encapsulation[Kapselung]\n* Trennung von Verantwortlichkeiten\
      \ ({glossary_url}separation-of-concern[Separation of Concerns] - SoC)\n* Lose,\
      \ aber funktionell ausreichende Kopplung von Bausteinen, siehe <<LG-03-06>>\n\
      * Hohe {glossary_url}cohesion[Kohäsion]\n* {glossary_url}open-close-principle[Offen/geschlossen-Prinzip]\n\
      * {glossary_url}dependency-inversion[Dependency-Inversion-Prinzip] - Umkehrung\
      \ von Abhängigkeiten durch Schnittstellen oder ähnliche Abstraktionen\n\n**Konzeptionelle\
      \ Integrität** (R2-R3)\n\n* bedeutet Einheitlichkeit (Homogenität, Konsistenz)\
      \ von Lösungen für ähnliche Probleme zu erreichen (R2)\n* als ein Mittel, um\
      \ das Prinzip der geringsten Überraschung zu erreichen (_principle of least\
      \ surprise_ oder _principle of least astonishment_ (POLA)) (R3)\n* Liskov’sches\
      \ Substitutionsprinzip als eine Möglichkeit, Konsistenz, konzeptionelle Integrität\
      \ und Robustheit (im Sinne von Typsicherheit) zu erreichen (R3).\n\n**Reduktion\
      \ von Komplexität** (R3)\n\n* als Motiv der Prinzipien KISS, YAGNI und CUPID\
      \ <<north-cupid>>\n* DRY (Don't Repeat Yourself) als eine Möglichkeit, Wiederholungen\
      \ zu vermeiden \n\n**Erwarte Fehler** (R2-R3)\n\n* als Mittel für den Entwurf\
      \ robuster und widerstandsfähiger Systeme (R3)\n* als eine Verallgemeinerung\
      \ des Robustheitsgrundsatzes (_Postel's law_) (R2)\n\n**SOLID Prinzipien** (R3)\n\
      \nSoftwarearchitekt:innen kennen Nutzen und Grenzen der SOLID Prinzipien: \n\
      Single Responsibility Principle, Open/Closed Principle, Liskov Substitution\
      \ Principle, Interface Segregation Principle, Dependency Inversion Principle\
      \ \n\n"
  - name: Zusammenhang zwischen Feedback-Schleifen und Risiko (R1, R2)
    short_name: LZ03-05
    id: 03-05
    description: "\n\nSoftwarearchitekt:innen verstehen die Notwendigkeit von Iterationen,\
      \ insbesondere bei unter Unsicherheit getroffenen Entscheidungen.\nSie\n  \n\
      * können den Einfluss von iterativem Vorgehen auf Architekturentscheidungen\
      \ erläutern (hinsichtlich Risiken und Prognostizierbarkeit)  (R1)\n* können\
      \ iterativ arbeiten und entscheiden (R1)\n* verstehen die Notwendigkeit von\
      \ Rückmeldungen zu Architekturentscheidungen (R1)\n* können von anderen Stakeholdern\
      \ systematisch Rückmeldung einholen. (R2)\n\n"
  - name: Abhängigkeiten von Bausteinen managen (R1)
    short_name: LZ03-06
    id: 03-06
    description: "\n\n\nSoftwarearchitekt:innen verstehen Abhängigkeiten und Kopplung\
      \ zwischen Bausteinen und können diese gezielt einsetzen.\nSie:\n\n* kennen\
      \ und verstehen unterschiedliche Arten der Kopplung von Bausteinen (beispielsweise\
      \  Kopplung über Benutzung/Delegation, Nachrichten/Ereignisse, Komposition,\
      \ Erzeugung, Vererbung, zeitliche Kopplung, Kopplung über Daten, Datentypen\
      \ oder Hardware)\n* verstehen, wie Abhängigkeiten die Kopplung vergrößern\n\
      * können mindestens die folgenden Arten von Kopplung unterscheiden:\n** statische\
      \ und dynamische Kopplung \n** efferente und afferente Kopplung \n* wissen,\
      \ dass auf statische Kopplung zu verzichten und stattdessen dynamische Kopplung\
      \ einzusetzen, die zugrundeliegende Kopplung nicht notwendigerweise reduziert\n\
      * können Kopplung erkennen und ihre Auswirkungen bewerten\n* können begründete\
      \ Entscheidungen treffen, ob eine Abhängigkeit in Anbetracht der Anforderungen\
      \ und Randbedingungen angemessen ist oder entfernt werden sollte\n* kennen Möglichkeiten\
      \ zur Auflösung bzw. Reduktion von Kopplung und können diese anwenden, beispielsweise:\n\
      ** Muster\n// (siehe <<LZ-2-5, LZ 2-5>>)\n** Grundlegende Entwurfsprinzipien\n\
      // (siehe <<LZ-2-6, LZ 2-6>>)\n** Externalisierung von Abhängigkeiten, d.h.\
      \ konkrete Abhängigkeiten erst zur Installations- oder Laufzeit festlegen, etwa\
      \ durch Anwendung von\n{glossary_url}dependency-injection[Dependency Injection]\
      \ (R3) (siehe auch <<LG-03-08>>).\n\n\n"
  - name: Schnittstellen entwerfen und spezifizieren (R1-R3)
    short_name: LZ03-07
    id: 03-07
    description: "\n\n\nSoftwarearchitekt:innen kennen die kritische Bedeutung von\
      \ Schnittstellen für die Interaktion zwischen Architekturbausteinen oder zwischen\
      \ dem System und externen Elementen. \nSie können solche Schnittstellen entwerfen\
      \ und spezifizieren.\n\nSie kennen:\n\n* wünschenswerte Eigenschaften von Schnittstellen\
      \ und können diese beim Entwurf erreichen (R1):\n** einfach zu erlernen, einfach\
      \ zu benutzen, einfach zu erweitern\n** schwer zu missbrauchen\n** funktional\
      \ vollständig aus Sicht der Nutzer:innen oder nutzender Bausteine.\n\n* die\
      \ Notwendigkeit unterschiedlicher Behandlung interner und externer Schnittstellen\
      \ (R2)\n\n* die Trennung zwischen Schnittstelle und Implementierung (R1):\n\
      ** Implementierungen können bei Bedarf ausgetauscht werden.\n\n* unterschiedliche\
      \ Charakteristika von Schnittstellen, beispielsweise (R3):\n** Transportkanäle\
      \ (etwa: TCP/IP als Teil des OSI 7-Schichten Modells)\n** intern oder extern\n\
      ** lokal oder remote\n** synchron oder asynchron\n** binär (nur maschinenlesbar)\
      \ oder textuell (auch menschenlesbar)\n** zustandslos oder zustandsbehaftet\n\
      ** Punkt-zu-Punkt oder Multipunkt (broadcast oder multicast)\n** Funktionsaufruf\
      \ (etwa: Remote Procedure Call) oder Nachrichtenaustausch\n** Batch, Request/Response\
      \ oder Streaming\n\n* Implementierungsansätze für synchrone {glossary_url}service[Remote-Service-Schnittstellen],\
      \ etwa (R3):\n** prozedurorientiert (etwa: GraphQL, WS-*/SOAP-basierte Webservices)\n\
      ** ressourcenorientiert (REST, REpresentational State Transfer)\n\nSiehe auch\
      \ <<LG-04-06>>.\n"
  - name: Wichtige Architekturmuster beschreiben, erklären und angemessen anwenden
      (R1, R3)
    short_name: LZ03-08
    id: 03-08
    description: |2+


      Softwarearchitekt:innen können die folgenden Architekturmuster erklären und Beispiele dafür liefern (R1):

      * {glossary_url}layer[Layer]
      * {glossary_url}pipes-and-filters[Pipes und Filter]
      * {glossary_url}microservices[Microservices]

      Softwarearchitekt:innen können einige der folgendene Muster erklären, ihre Relevanz für konkrete Systeme erläutern und Beispiele dafür liefern (R3):

      * {glossary_url}blackboard[Blackboard]
      * {glossary_url}broker[Broker]
      * {glossary_url}cqrs[CQRS (Command-Query-Responsibility-Segregation)]
      * {glossary_url}event-sourcing[Event sourcing]
      * {glossary_url}dependency-injection[Dependency Injection] (siehe auch <<LG-03-06>>)
      * Integrations und Messaging-Patterns (z.B. aus <<hohpe>>)
      * {glossary_url}remote-procedure-call[Remote procedure call]
      * {glossary_url}model-view-controller[MVC] (Model View Controller),
        {glossary_url}model-view-viewmodel[MVVM] (Model View ViewModel),
        {glossary_url}model-view-update[MVU] (Model View Update),
        {glossary_url}presentation-abstraction-control[PAC] (Presentation Abstraction Control)
      * {glossary_url}plugin[Plugin]
      * {glossary_url}ports-and-adapters[Ports and Adapters] (Synonyme: Onion Architektur, Hexagonal Architektur, Clean Architektur)
      * {glossary_url}service-oriented-architecture[SOA] (Service-Oriented Architektur)

      Softwarearchitekt:innen kennen wesentliche Quellen für Architekturmuster, beispielsweise die POSA-Literatur (z.{nbsp}B. <<buschmanna>>) und PoEAA (<<fowler>>) (für Informationssysteme). (R3)


      Sie wissen:

      * dass Muster ein Weg sind, bestimmte Qualitäten für gegebene Probleme und Anforderungen innerhalb gegebener Kontexte zu erreichen.
      * dass es verschiedene Kategorien von Mustern gibt.
      * zusätzliche Quellen für Muster, die sich auf ihre spezifische technische oder Anwendungsdomäne beziehen.

  - name: Wichtige Entwurfsmuster beschreiben, erklären und angemessen anwenden (R3)
    short_name: LZ03-09
    id: 03-09
    description: "\n\nSoftwarearchitekt:innen können mehrere der folgenden Entwurfsmuster\
      \ beschreiben, ihre Relevanz für die Architektur und konkrete Systeme erklären\
      \ sowie Beispiele nennen. \n\n* {glossary_url}combinator[Combinator]\n* Schnittstellenmuster\
      \ wie {glossary_url}adapter[Adapter], {glossary_url}facade[Facade],\n  und {glossary_url}proxy[Proxy].\n\
      \  Architekt:innen sollten wissen, dass diese Muster unabhängig von bestimmten\n\
      \  Programmiersprachen oder Frameworks verwendet werden können.\n* {glossary_url}interpreter[Interpreter]\n\
      * {glossary_url}observer[Observer]\n* {glossary_url}template-method[Template\
      \ Method] und {glossary_url}strategy[Strategy]\n* {glossary_url}visitor[Visitor]\n\
      \nSoftwarearchitekt:innen kennen wesentliche Quellen für Entwurfsmuster, wie\
      \ z.B.\n<<gof,GOF>> und <<buschmanna,POSA>>.\n\n\n"
  - name: Querschnittsthemen identifizieren und Querschnittskonzepte entwerfen und
      umsetzen (R1)
    short_name: LZ03-10
    id: 03-10
    description: |2


      Softwarearchitekt:innen können:

      * die Bedeutung von {glossary_url}cross-cutting-concern[Querschnittsthemen] erklären
      * solche Querschnittsthemen identifizieren
      * Querschnittskonzepte entwerfen, unter anderem Persistenz, Kommunikation, GUI, Fehlerbehandlung, Nebenläufigkeit, Energieeffizienz
      * mögliche wechselseitige Abhängigkeiten erkennen und beurteilen.

      Softwarearchitekt:innen wissen, dass solche Querschnittskonzepte systemübergreifend wiederverwendbar sein können.

      Siehe auch <<LG-04-07>>.
  - name: Grundlegende Prinzipien von Software-Deployments kennen (R3)
    short_name: LZ03-11
    id: 03-11
    description: |2+


      Softwarearchitekt:innen:

      * wissen, dass Software-Deployment der Prozess ist, durch den neue oder aktualisierte Software zur Benutzung bereitgestellt wird
      * können grundlegende Konzepte des Deployments von Software benennen und erklären:
      ** Automatisierung von Deployments
      ** Wiederholbare Builds
      ** Konsistente Umgebungen (z.{nbsp}B. durch Nutzung von unveränderlicher (_immutable_) Infrastruktur)
      ** Alles liegt unter Versionskontrolle
      ** Releases sind einfach zurückzunehmen

  - name: Herausforderungen verteilter Systeme kennen (R3)
    short_name: LZ03-12
    id: 03-12
    description: |2


      Softwarearchitekt:innen können:

      * die Verteilung in einer gegebenen Software-Architektur identifizieren
      * Konsistenzkriterien für ein gegebenes fachliches Problem analysieren
      * Kausalität von Ereignissen in einem verteilten System erklären

      Softwarearchitekt:innen wissen:

      * dass Kommunikation in einem verteilten System fehlschlagen kann
      * dass es bei verteilten Systemen Einschränkungen hinsichtlich der Konsistenz in Datenbanken gibt
      * was das "Split-Brain"-Problem ist und warum es schwierig zu lösen ist
      * dass es unmöglich ist, die exakte zeitliche Reihenfolge der Ereignisse in einem verteilten System zu bestimmen
- name: documentation
  short_name: documentat
  id: documentation
  description: Documentation
  color_code: '#b0915d'
  areas:
  - name: Anforderungen an technische Dokumentation erläutern und berücksichtigen
      (R1)
    short_name: LZ04-01
    id: 04-01
    description: |2+


      Softwarearchitekt:innen kennen die wesentlichen Anforderungen an technische Dokumentation und können diese bei der Dokumentation von Systemen berücksichtigen bzw. erfüllen:

      * Verständlichkeit, Korrektheit, Effizienz, Angemessenheit, Wartbarkeit
      * Orientierung von Form, Inhalt und Detailgrad an Zielgruppe der Dokumentation

      Sie wissen, dass Verständlichkeit technischer Dokumentation nur von deren Zielgruppen beurteilt werden kann.

  - name: Softwarearchitekturen beschreiben und kommunizieren (R1-R3)
    short_name: LZ04-02
    id: 04-02
    description: |2+


      Softwarearchitekt:innen nutzen Dokumentation zur Unterstützung bei Entwurf, Implementierung und Weiterentwicklung (auch genannt _Wartung_ oder _Evolution_) von Systemen. (R2)

      Softwarearchitekt:innen (R1):

      * können Architekturen entsprechend der Anliegen der Stakeholder dokumentieren und kommunizieren und dadurch unterschiedliche Zielgruppen adressieren, z.{nbsp}B. Management, Entwicklungsteams, QS, andere Softwarearchitekt:innen sowie möglicherweise zusätzliche Stakeholder
      * können die Beiträge unterschiedlicher Autorengruppen stilistisch und inhaltlich konsolidieren und harmonisieren
      * können Maßnahmen entwickeln und umsetzen, die mündliche und schriftliche Kommunikation in Einklang miteinander halten und miteinander angemessen ausbalancieren
      * kennen den Nutzen von Template-basierter Dokumentation
      * wissen, dass verschiedene Eigenschaften der Dokumentation von Spezifika des Systems, seinen Anforderungen, Risiken, dem Entwicklungsvorgehen, der Organisation oder anderen Faktoren abhängen.

      Sie können beispielsweise die folgenden Merkmale von Dokumentation je nach Situation anpassen (R3):

      * Umfang und Detaillierungsgrad der benötigten Dokumentation
      * das Dokumentationsformat
      * die Zugänglichkeit der Dokumentation
      * Formalitäten der Dokumentation (z.{nbsp}B. Diagramme, die einem Metamodell entsprechen, oder einfache Zeichnungen)
      * formale Überprüfungen und Freigabeprozesse für die Dokumentation


  - name: Notations-/Modellierungsmittel für Beschreibung von Softwarearchitektur
      erläutern und anwenden (R2-R3)
    short_name: LZ04-03
    id: 04-03
    description: |2+


      Softwarearchitekt:innen kennen mindestens folgende UML-Diagramme zur Notation von Architektursichten:

      * Klassen-, Paket-, Komponenten- (jeweils R2) und Kompositionsstrukturdiagramme (R3)
      * Verteilungsdiagramme (R2)
      * Sequenz- und Aktivitätsdiagramme (R2)
      * Zustandsdiagramme (R3)

      Softwarearchitekt:innen kennen Alternativen zu UML, beispielsweise (R3)

      * ArchiMate
      * SysML
      * C4, siehe <<brownc4>>
      * Entity-Relationship Diagramme, siehe <<erd>>
      * für Laufzeitsichten beispielsweise Flussdiagramme, nummerierte Listen oder Business-Process-Modelling-Notation (BPMN).

  - name: Lernziel nicht gefunden (R3)
    short_name: LZ04-04
    id: 04-04
    description: |2+


      Softwarearchitekt:innen können unerwartete Situationen geschickt bewältigen.

      Hinweis: Der Titel dieses Lernziels wurde bewusst gewählt und stellt keinen technischen Fehler dar.

  - name: Architektursichten erläutern und anwenden (R1)
    short_name: LZ04-05
    id: 04-05
    description: |2

      Softwarearchitekt:innen können folgende Architektursichten anwenden:

      * Kontextsicht (auch genannt Kontextabgrenzung)
        ** enthält die externen Schnittstellen von Systemen
        ** bei Bedarf differenziert nach fachlichem und technischem Kontext

      * Baustein- oder Komponentensicht (Aufbau des Systems aus Softwarebausteinen)
      * Laufzeitsicht (dynamische Sicht, Zusammenwirken der Softwarebausteine zur Laufzeit, Zustandsmodelle)
      * Verteilungs-/Deploymentsicht (Hardware und technische Infrastruktur sowie Abbildung von Softwarebausteinen auf diese Infrastruktur)

      Zusätzliche Sichten können nach Bedarf verwendet werden, um weitere Anliegen oder Anforderungen von Stakeholden zu berücksichtigen, z. B. Funktionale Sicherheit, Informations-, Betriebs- oder User-Interface Sicht (R3).
  - name: Schnittstellen dokumentieren (R1)
    short_name: LZ04-06
    id: 04-06
    description: |2+


      Softwarearchitekt:innen können sowohl interne als auch externe Schnittstellen dokumentieren.

      Siehe auch <<LG-03-07>>.

  - name: Querschnittsthemen dokumentieren und kommunizieren (R2)
    short_name: LZ04-07
    id: 04-07
    description: |2+


      Softwarearchitekt:innen können typische Querschnittsthemen und die dazugehörigen Lösungskonzepte (Querschnittskonzepte) adäquat dokumentieren und kommunizieren, z.{nbsp}B. Persistenz, Ablaufsteuerung, UI, Verteilung/Integration, Protokollierung.

      Siehe auch <<LG-03-10>>.

  - name: Architekturentscheidungen erläutern und dokumentieren (R1-R2)
    short_name: LZ04-08
    id: 04-08
    description: |2


      Softwarearchitekt:innen können:

      * Architekturentscheidungen systematisch herbeiführen, begründen, kommunizieren und dokumentieren
      * gegenseitige Abhängigkeiten solcher Entscheidungen erkennen, kommunizieren und dokumentieren

      Softwarearchitekt:innen kennen Architecture-Decision-Records (ADR, siehe <<nygard>>) und können diese zur Dokumentation von Entscheidungen einsetzen (R2).
  - name: Weitere Hilfsmittel und Werkzeuge zur Dokumentation kennen (R3)
    short_name: LZ04-09
    id: 04-09
    description: "\n\nSoftwarearchitekt:innen kennen:\n\n* Grundlagen mehrerer publizierter\
      \ Frameworks zur Beschreibung von Softwarearchitekturen, beispielsweise:\n**\
      \ ISO/IEC/IEEE 42010, \n** arc42,\n** C4, siehe <<brownc4>>\n* Ideen und Beispiele\
      \ von Checklisten für die Erstellung, Dokumentation und Prüfung von Softwarearchitekturen\n\
      * mögliche Werkzeuge zur Erstellung und Pflege von Architekturdokumentation\n\
      \n"
- name: evaluation
  short_name: evaluation
  id: evaluation
  description: Evaluation
  color_code: '#a6916f'
  areas:
  - name: Gründe für Architekturanalyse kennen (R1)
    short_name: LZ05-01
    id: 05-01
    description: |2+


      Softwarearchitekt:innen verstehen, dass es verschiedene mögliche Gründe gibt, um eine Architekturanalyse durchzuführen, zum Beispiel:

      * Risiken und mögliche Verbesserungen im Architekturentwurf  identifizieren (vor, während und nach der Implementierung)
      * feststellen, ob der Architekturentwurf die Anforderungen erfüllt oder erfüllen wird
      * erheben, inwiefern die Implementierung zu Architekturentscheidungen und Architekturentwurf passt
      * überprüfen, inwiefern architekturrelevante Anliegen der Stakeholder berücksichtigt sind

  - name: Qualitäten eines Softwaresystems analysieren (R1, R3)
    short_name: LZ05-02
    id: 05-02
    description: |2


      Softwarearchitekt:innen

      * verstehen, dass für eine einzelne Qualität eines Softwaresystems
        verschiedene Analysemethoden zur Verfügung stehen können,
        wie z.{nbsp}B.:
      ** Analyse der Ergebnisse von Akzeptanztests (R1)
      ** quantitative Messung von Laufzeitverhalten (R1)
      ** qualitative Auswertung durch Interviews, Umfragen, Penetrationstests etc. (R1)
      ** szenariobasierte Analyse (R1)
      ** Architektur-Metriken für Kopplung wie der Grad eingehender und ausgehender Abhängigkeiten (R1)
      ** Kosten-Nutzen-Analyse (R3)
      ** Architecture Trade-Off Analysis Method <<bass>> (R3)

      * kennen Informationsquellen für Qualitätsanalyse:
      ** Anforderungsdokumentation (R1)
      ** Architekturdokumentation (R1)
      ** Architektur- und Entwurfsmodelle (R1)
      ** Quelltext (R1)
      ** Quelltext-bezogene Metriken wie z.{nbsp}B: Lines-of-Code, (zyklomatische) Komplexität (R1)
      ** Testfälle und ihre Testresultate (R1)
      ** Fehler und ihre Position im Quelltext, besonders Fehlercluster (R1)
      ** andere Dokumentation des Systems, wie z.{nbsp}B. Betriebs- und Testdokumentation (R1)
      ** Laufzeit-Logs und Metriken (R1)
      ** Revisionshistorie, wie z.{nbsp}B. wie Änderungsrate pro Komponente (R3)

      Siehe auch <<LG-02-03>>, <<LG-02-04>>.
  - name: Konformität mit Architekturentscheidungen bewerten (R2)
    short_name: LZ05-03
    id: 05-03
    description: |2+


      Softwarearchitekt:innen können beurteilen, ob die Systemimplementierung mit dem Architekturentwurf und den Entscheidungen übereinstimmt, indem sie Methoden wie Code- und Architekturreviews oder toolgestützte Analysen einsetzen.


- name: examples
  short_name: examples
  id: examples
  description: Examples
  color_code: '#9c9180'
  areas:
  - name: Bezug von Anforderungen und Randbedingungen zur Lösung erfassen (R3)
    short_name: LZ06-01
    id: 06-01
    description: |2+

      Softwarearchitekt:innen haben an mindestens einem Beispiel den Bezug von Anforderungen und Randbedingungen zu Lösungsentscheidungen erkannt und nachvollzogen.

  - name: Technische Umsetzung einer Lösung nachvollziehen (R3)
    short_name: LZ06-02
    id: 06-02
    description: |2+


      Softwarearchitekt:innen können anhand mindestens eines Beispiels die technische Umsetzung (Implementierung, technische Konzepte, eingesetzte Produkte, Lösungsstrategien) einer Lösung nachvollziehen.

- name: requirements
  short_name: requiremen
  id: requirements
  description: Requirements
  color_code: '#929292'
  areas:
  - name: Stakeholder-Anliegen verstehen (R1, R3)
    short_name: LZ02-01
    id: 02-01
    description: |2


      Architekten können Stakeholder und deren Anliegen sowie deren Auswirkungen auf die Softwarearchitektur oder den Entwurfs- und Entwicklungsprozess identifizieren. (R1)

      Beispiele für Stakeholder und ihre Anliegen (R3):

      |===
      |Interessengruppe |Anliegen der Interessengruppe

      | Produktmanagement
      | z.{nbsp}B. benötigte Zeit für die Umsetzung der Anforderungen

      | Entwicklungsteam
      | z. B. zu implementierende Komponenten und Schnittstellen, Protokolle, technische Anforderungen und Randbedingungen

      | Requirements Engineering, Product-Owner, Businss-Analyse, Fachbereiche
      | z. B. Erfüllung der Anforderungen

      | Projektmanagement
      | z. B. benötigte Zeit und Budget für die Umsetzung, verbundene Risiken des
      gewählten architekturellen Ansatzes

      | Qualitätssicherung und Test
      | z. B. isoliertes Testen von Komponenten

      | Betrieb
      | z.{nbsp}B. Infrastrukturanforderungen im Zusammenhang mit dem Betrieb des Systems

      |===

      Softwarearchitekt:innen können potenzielle Konflikte zwischen kurz- und langfristigen Zielen identifizieren (z.B. Geschäfts- und Projektziele vs. Architektur- und Wartbarkeitsziele).
      Sie verstehen, dass sie die relevanten Stakeholder einbeziehen müssen, um diese Konflikte zu lösen. (R1)

      Architekt:innen verstehen, dass nicht alle Anliegen der Stakeholder in Anforderungen umgesetzt werden können oder werden, aber dennoch berücksichtigt werden müssen. (R3)

      Architekt:innen können die Anliegen der Stakeholder nutzen, um fehlende oder widersprüchliche Anforderungen zu entdecken und/oder Anforderungen und Einschränkungen an der Architektur zu validieren, z.B. in Stakeholder-Interviews. (R3)
  - name: Anforderungen und Randbedingungen klären und berücksichtigen können (R1-R3)
    short_name: LZ02-02
    id: 02-02
    description: "\n\nSoftwarearchitekt:innen verstehen, dass sowohl Anforderungen\
      \ als auch Randbedingungen Auswirkungen auf die Architektur und die Architekturarbeit\
      \ haben können (R2).\nSie sind in der Lage, Anforderungen und Randbedingungen\
      \ zu klären und beim Architekturentwurf und im Entwicklungsprozess zu berücksichtigen.\n\
      Sie verstehen, dass ihre Entscheidungen zu zusätzlichen Anforderungen führen\
      \ oder Änderungen an bestehenden Anforderungen erforderlich machen können.\n\
      \nSie erkennen und berücksichtigen den Einfluss von:\n\n* produktbezogenen Anforderungen\
      \ wie (R1)\n** funktionale Anforderungen\n** {glossary_url}quality-requirement[Qualitätsanforderungen]\n\
      \n* Technologische Randbedingungen wie \n** bestehende oder geplante Hardware-\
      \ und Software-Infrastruktur (R1)\n** technologische Beschränkungen für Datenstrukturen\
      \ und Schnittstellen (R2)\n** Referenzarchitekturen, Bibliotheken, Komponenten\
      \ und Frameworks (R1)\n** Programmiersprachen (R2)\n\n* Organisatorischen Randbedingungen\
      \ wie\n** Organisationsstruktur von Entwicklungsteams und Auftraggebenden (R1),\
      \ insbesondere das Gesetz von Conway (R2)\n** Unternehmens- und Teamkultur (R3)\n\
      ** Partnerschaften und Kooperationen (R2)\n** Normen, Richtlinien und Prozessmodelle\
      \ (z.{nbsp}B. Genehmigungs- und Freigabeprozesse) (R2)\n** Verfügbarkeit von\
      \ Ressourcen wie Budget, Zeit und Personal (R1)\n** Verfügbarkeit, Qualifikation\
      \ und Engagement von Mitarbeitenden (R1)\n\n* Regulatorischen Randbedingungen\
      \ wie (R2)\n** lokale und internationale rechtliche Einschränkungen\n** Vertrags-\
      \ und Haftungsfragen\n** Datenschutzgesetze und Gesetze zum Schutz der Privatsphäre\n\
      ** Fragen der Einhaltung oder Verpflichtungen zur Beweislast\n\n* Trends wie\
      \ (R3)\n** Markttrends\n** Technologietrends (z.{nbsp}B. Cloud, Microservices,\
      \ Container, generative KI oder LLMs)\n** Methodik-Trends (z.{nbsp}B. Agilität)\n\
      \nSoftwarearchitekt:innen können beschreiben, wie diese Einflüsse auf Architekturentscheidungen\
      \ wirken, und sie können die Konsequenzen einer Änderung der Einflussfaktoren\
      \ anhand von Beispielen erläutern (R2).\n\n\n"
  - name: Qualitäten eines Softwaresystems verstehen und erklären (R1)
    short_name: LZ02-03
    id: 02-03
    description: "\n\nSoftwarearchitekt:innen wissen dass der Begriff \"Qualität\"\
      \ in verschiedenen Kontexten unterschiedlich benutzt wird: \n\n* im Kontext\
      \ von Qualitätsmanagement im Sinne von \"Güte\" und \n* im Sinne spezifischer\
      \ Eigenschaften (eines Softwaresystems). \n\nIn diesem Lernziel geht es um letzteres.\n\
      \nSoftwarearchitekt:innen können erklären dass:\n\n* es unterschiedliche Taxonomien\
      \ gibt, die Qualitäten von Softwaresystemen kategorisieren \n* manche Kategorisierungen\
      \ zwischen Funktionalität und Qualität unterscheiden, wie zum Beispiel IREB\
      \ <<IREBFoundation>>\n* Softwarearchitekt:innen die Qualitäten eines Softwaresystems\
      \ beeinflussen können\n* die Veränderung einer Qualität andere so beeinflussen\
      \ kann, dass Abwägungen notwendig werden, wie z.{nbsp}B.\n** Konfigurierbarkeit\
      \ versus Zuverlässigkeit\n** Speicherbedarf versus Leistungseffizienz\n** Sicherheit\
      \ versus Benutzbarkeit\n** Laufzeitflexibilität versus Wartbarkeit.\n\n\nSie\
      \ verstehen, dass sich eine einzelne Anforderung auf mehrere Qualitäten beziehen\
      \ kann.\n"
  - name: Anforderungen an Qualitäten formulieren (R1-R3)
    short_name: LZ02-04
    id: 02-04
    description: |2+


      Softwarearchitekt:innen:

      * können Szenarien für gegebene Qualitäten mit Kontext, Stimulus, Reaktion und Messung für verschiedene Zwecke formulieren, z. B. um Anforderungen zu klären, Input für Architekturbewertungen zu liefern usw. (R1)

      * verstehen, dass eine Anforderung für eine gegebene Qualität
        eine Analysemethode spezifizieren sollte (siehe <<LG-05-02>>) (R1)
      * wissen, dass die Verwendung einer Metrik als Ziel diese invalidieren kann (R2), wie z.{nbsp}B. in Goodhart's Law (R3) beschrieben

  - name: Explizite Aussagen vor impliziten Annahmen bevorzugen (R1)
    short_name: LZ02-05
    id: 02-05
    description: |2+


      Softwarearchitekt:innen:

      * können Annahmen oder Voraussetzungen explizit darstellen und dadurch implizite Annahmen vermeiden
      * wissen, dass implizite Annahmen potenzielle Missverständnisse zwischen beteiligten Stakeholdern bewirken

levels:
- name: Need to Learn
  short_name: Learn
  id: Need-to-Learn
  color_code: '#FF0000'
  level: 1
  icon: thumb_down
- name: Need to Lookup
  short_name: Lookup
  id: Need-to-Lookup
  color_code: '#0000FF'
  level: 2
  icon: question_mark
- name: Already Known
  short_name: Known
  id: Already-Known
  color_code: '#008000'
  level: 3
  icon: thumb_up
element_names:
  tree: Syllabus
  aspect: Chapter
  area: Learning Goal
  facet: LearnItem
  level: Self Assessment
ring_specs:
  tree:
    text_mode: horizontal
    inner_ratio: 0.0
    outer_ratio: 0.1111111111111111
    levels_visible: false
  aspect:
    text_mode: curved
    inner_ratio: 0.1111111111111111
    outer_ratio: 0.4444444444444444
    levels_visible: false
    symmetry_mode: score
  area:
    text_mode: angled
    inner_ratio: 0.4444444444444444
    outer_ratio: 1.0
    levels_visible: false
  facet:
    text_mode: empty
    inner_ratio: 0.0
    outer_ratio: 0.0
    levels_visible: false
total_elements:
  tree: 1
  aspects: 6
  areas: 38
  facets: 0
